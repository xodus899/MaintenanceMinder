<div id="searchFormTop">
    <form>
      <div id="searchForm">
        <div id="searchTitle">
          <h3><em>Search for Maintenance and Recalls</em></h3><input class="js-search-year" id="years" placeholder="Year" type="text"> <input class="js-search-make" id="makes" placeholder="Make" type="text"> <input class="js-search-model" id="models" placeholder="Model" type="text"> <button class="js-search-button" data-target="#myModal" data-toggle="modal" id="uSubmit">Find Automobile</button> <button id="uSubmit"><a href="#mapText">Find Retailer</a></button>
        </div>
      </div>
    </form>
  </div>
  <div id="searchPage">
    <%= image_tag("car-garage.jpg",:id => "car-garage")%>
  </div><!-- first modal for service intervals -->
  <div class="container bothModals">
    <div class="modal left fade" id="myModal" role="dialog" style="overflow-y: scroll; max-height:100%; margin-top: 1px; margin-bottom:1px;" tabindex="-1">
      <div class="modal-dialog" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <button aria-label="Close" class="close" data-dismiss="modal" type="button"><span aria-hidden="true">&times;</span></button>
            <h4 class="modal-title"><button class="js-search-button" data-target="#myModal1" data-toggle="modal">Click To See Available Recalls</button></h4>
          </div>
          <div class="modal-body">
            <div>
              <h5>Maintenace Intervals</h5>
              <h3> API is currently down, issue will be fixed when a new api is sourced.</h3>
              <ul class="js-auto-list"></ul>
            </div>
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <button class="btn btn-default" data-dismiss="modal" type="button">Close</button>
      </div>
    </div><!-- /.modal-content -->
  </div><!-- /.modal-dialog -->
  <!-- /.modal -->
  <!-- second modal for recalls -->
  <div class="container bothModals">
    <div class="modal right fade" id="myModal1" role="dialog" style="overflow-y: scroll; max-height:100%; margin-top: 1px; margin-bottom:1px;" tabindex="-1">
      <div class="modal-dialog" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <button aria-label="Close" class="close" data-dismiss="modal" type="button"><span aria-hidden="true">&times;</span></button>
            <h4 class="modal-title">Available Recalls</h4>
          </div>
          <div class="modal-body">
            <h3> API is currently down, issue will be fixed when a new api is sourced.</h3>
            <div>
              <ul class="js-auto-recalls"></ul>
            </div>
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <button class="btn btn-default" data-dismiss="modal" type="button">Close</button>
      </div>
    </div><!-- /.modal-content -->
  </div><!-- /.modal-dialog -->
  <!-- /.modal -->



<!-- above are modals for the initial search form of the car and recalls/bulletins -->
<!-- _______________________________________________________________________________________________________________________ -->

<h3 id= "mapText"><em> Use the Map to search for a dealer near you. Recalls are FREE to fix </em></h3>
    <input id="origin-input" class="controls" type="text"
        placeholder="Enter an origin location">
    <input id="destination-input" class="controls" type="text"
        placeholder="Enter a destination location">
    <div id="map">

    <script>

      function initMap() {
        var origin_place_id = null;
        var destination_place_id = null;
        var travel_mode = 'DRIVING';
        var map = new google.maps.Map(document.getElementById('map'), {
          mapTypeControl: false,
          center: {lat: 26.0112,lng: -80.1495},
          zoom: 12
        });
        var directionsService = new google.maps.DirectionsService;
        var directionsDisplay = new google.maps.DirectionsRenderer;
        directionsDisplay.setMap(map);


        var origin_input = document.getElementById('origin-input');
        var destination_input = document.getElementById('destination-input');
        var modes = document.getElementById('mode-selector');

        map.controls[google.maps.ControlPosition.TOP_LEFT].push(origin_input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(destination_input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(modes);

        var origin_autocomplete = new google.maps.places.Autocomplete(origin_input);
        origin_autocomplete.bindTo('bounds', map);
        var destination_autocomplete =
            new google.maps.places.Autocomplete(destination_input);
        destination_autocomplete.bindTo('bounds', map);

        // Sets a listener on a radio button to change the filter type on Places
        // Autocomplete.
        // function setupClickListener(id, mode) {
        //   var radioButton = document.getElementById(id);
        //   radioButton.addEventListener('click', function() {
        //     travel_mode = mode;
        //   });
        // }
        // setupClickListener('changemode-walking', 'WALKING');
        // setupClickListener('changemode-transit', 'TRANSIT');
        // setupClickListener('changemode-driving', 'DRIVING');

        function expandViewportToFitPlace(map, place) {
          if (place.geometry.viewport) {
            map.fitBounds(place.geometry.viewport);
          } else {
            map.setCenter(place.geometry.location);
            map.setZoom(11);
          }
        }

        origin_autocomplete.addListener('place_changed', function() {
          var place = origin_autocomplete.getPlace();
          if (!place.geometry) {
            window.alert("The place contains no geometry");
            return;
          }
          expandViewportToFitPlace(map, place);

          // If the place has a geometry, store its place ID and route if we have
          // the other place ID
          origin_place_id = place.place_id;
          route(origin_place_id, destination_place_id, travel_mode,
                directionsService, directionsDisplay);
        });

        destination_autocomplete.addListener('place_changed', function() {
          var place = destination_autocomplete.getPlace();
          if (!place.geometry) {
            window.alert("The place contains no geometry");
            return;
          }
          expandViewportToFitPlace(map, place);

          // If the place has a geometry, store its place ID and route if we have
          // the other place ID
          destination_place_id = place.place_id;
          route(origin_place_id, destination_place_id, travel_mode,
                directionsService, directionsDisplay);
        });

        function route(origin_place_id, destination_place_id, travel_mode,
                       directionsService, directionsDisplay) {
          if (!origin_place_id || !destination_place_id) {
            return;
          }
          directionsService.route({
            origin: {'placeId': origin_place_id},
            destination: {'placeId': destination_place_id},
            travelMode: travel_mode
          }, function(response, status) {
            if (status === 'OK') {
              directionsDisplay.setDirections(response);
            } else {
              window.alert('Your request failed due to ' + status);
            }
          });
        }
      }
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAV49mGqmaV82heE1c0FJYMaAoFVNRdi9E&libraries=places&callback=initMap"
        async defer></script>
</div>
